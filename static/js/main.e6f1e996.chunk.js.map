{"version":3,"sources":["logo.svg","Components/CryptoList.js","Components/Crypto.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CryptoList","props","liElements","cryptoList","map","cryptoObj","key","currency","className","cssClass","lastRate","arrow","symbol","Crypro","getCryptoData","axios","get","then","res","tickers","data","setState","state","newCryptoList","ticker","cryptoRate","lastCryptoObj","find","newCryptoObj","last","buy","sell","undefined","String","fromCharCode","push","Object","entries","filterCryptoList","_filterinput","value","trim","toUpperCase","filteredCryptoList","filter","includes","this","timerID","setInterval","clearInterval","type","placeholder","ref","onChange","htmlFor","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6f1e996.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c6440537.svg\";","import React from \"react\";\r\n\r\nimport \"../Styles/CryptoList.css\";\r\n\r\nconst CryptoList = (props) => {\r\n  let cryptoList = props.cryptoList;\r\n\r\n  let liElements = cryptoList.map((cryptoObj) => {\r\n    return (\r\n      <li key={cryptoObj.currency}>\r\n        <span className=\"label\">Last rate: </span>\r\n        <span className={`rate ${cryptoObj.cssClass}`}>\r\n          {cryptoObj.lastRate} {cryptoObj.arrow}\r\n        </span>\r\n        <span className=\"currencyName\">{cryptoObj.currency}</span>\r\n        <span className=\"currencySymbol\">[{cryptoObj.symbol}]</span>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"crypto-list\">\r\n      <ul className=\"list\">{liElements}</ul>\r\n    </div>\r\n  );\r\n};\r\nexport default CryptoList;\r\n","import React, { Component } from \"react\";\r\nimport \"../Styles/Crypto.css\";\r\n\r\nimport axios from \"axios\";\r\nimport CryptoList from \"./CryptoList\";\r\n\r\nexport default class Crypro extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      cryptoList: [],\r\n      filteredCryptoList: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCryptoData();\r\n    this.timerID = setInterval(() => {\r\n      this.getCryptoData();\r\n    }, 5000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  getCryptoData = () => {\r\n    axios.get(\"https://blockchain.info/ticker\").then((res) => {\r\n      const tickers = res.data;\r\n\r\n      this.setState((state) => {\r\n        let newCryptoList = [];\r\n\r\n        for (const [ticker, cryptoRate] of Object.entries(tickers)) {\r\n          let lastCryptoObj = state.cryptoList.find((cryptoObj) => {\r\n            return cryptoObj.currency === ticker;\r\n          });\r\n\r\n          let newCryptoObj = {\r\n            currency: ticker,\r\n            lastRate: cryptoRate.last,\r\n            buy: cryptoRate.buy,\r\n            sell: cryptoRate.sell,\r\n            symbol: cryptoRate.symbol,\r\n          };\r\n\r\n          if (lastCryptoObj !== undefined) {\r\n            if (newCryptoObj.lastRate > lastCryptoObj.lastRate) {\r\n              newCryptoObj.cssClass = \"green\";\r\n              newCryptoObj.arrow = String.fromCharCode(8593);\r\n            } else if (newCryptoObj.lastRate < lastCryptoObj.lastRate) {\r\n              newCryptoObj.cssClass = \"red\";\r\n              newCryptoObj.arrow = String.fromCharCode(8595);\r\n            } else {\r\n              newCryptoObj.cssClass = \"blue\";\r\n              newCryptoObj.arrow = String.fromCharCode(8596);\r\n            }\r\n          } else {\r\n            newCryptoObj.cssClass = \"blue\";\r\n            newCryptoObj.arrow = String.fromCharCode(8596);\r\n          }\r\n\r\n          newCryptoList.push(newCryptoObj);\r\n        }\r\n        return {\r\n          cryptoList: newCryptoList,\r\n        };\r\n      });\r\n      this.filterCryptoList();\r\n    });\r\n  };\r\n\r\n  filterCryptoList = () => {\r\n    this._filterinput.value = this._filterinput.value.trim().toUpperCase();\r\n\r\n    this.setState((state) => {\r\n      let newFilteredCryptoList = state.cryptoList.filter((cryptoObj) => {\r\n        return cryptoObj.currency.includes(this._filterinput.value);\r\n      });\r\n\r\n      return {\r\n        filteredCryptoList: newFilteredCryptoList,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"crypto\">\r\n        <div className=\"input-wraper\">\r\n          <input type=\"text\" placeholder=\" \" ref={(data) => (this._filterinput = data)} onChange={this.filterCryptoList} />\r\n          <div htmlFor=\"username\" className=\"label\">\r\n            Currency\r\n          </div>\r\n        </div>\r\n\r\n        <CryptoList cryptoList={this.state.filteredCryptoList} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nimport Crypto from \"./Components/Crypto\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h1>Bitcoin price</h1>\r\n      </header>\r\n      <Crypto />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}